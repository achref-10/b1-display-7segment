# 🔋 Battery SoC Display System for Bako B1 (LiFePO4-Compatible)

This project replaces the inaccurate analog battery charge display in the **Bako B1 electric vehicle** with a precise, real-time **digital system** that reads the **State of Charge (SoC)** directly from the **Battery Management System (BMS)** over the **CAN bus** and displays it on a **7-segment LED display**.

---

## 🚗 Problem Statement

The original analog display in the Bako B1 estimates SoC by reading battery **voltage** — a method that works for **lead-acid** batteries, but fails with **LiFePO4** batteries, which maintain nearly constant voltage until almost depleted. This can mislead drivers into thinking their battery is still full.

---

## 🎯 Objective

✅ Accurately read the **real SoC** value from the **BMS via CAN bus**  
✅ Display the value as a **numeric percentage** (e.g., 87%)  
✅ Make the system compatible with **LiFePO4 batteries**  
✅ Replace analog indicators with **reliable digital feedback**  
✅ Use **low-cost, off-the-shelf components** (Arduino, MCP2515, MAX7219)

---

## 🔧 System Architecture

### 🧩 Components

| Component                  | Description                         |
|----------------------------|-------------------------------------|
| Arduino Uno                | Main microcontroller                |
| MCP2515 CAN Module         | Interface to CAN bus (BMS reader)   |
| MAX7219 7-Segment Display  | Visual SoC display (numeric)        |
| DC-DC Converter (6R1ML)    | Converts 12V → 5V to power system    |

### 🔌 Wiring Summary

#### MCP2515 → Arduino

| MCP2515 Pin | Arduino Pin |
|-------------|-------------|
| VCC         | 3.3V        |
| GND         | GND         |
| CS          | D10         |
| SCK         | D13         |
| SO (MISO)   | D12         |
| SI (MOSI)   | D11         |

#### MAX7219 → Arduino

| MAX7219 Pin | Arduino Pin |
|-------------|-------------|
| VCC         | 5V          |
| GND         | GND         |
| DIN         | D6          |
| CS/LOAD     | D4          |
| CLK         | D5          |

#### DC-DC Converter

- Input: 12V from vehicle  
- Output: 5V to power Arduino and display

---

## 🧠 How It Works

1. The **MCP2515** listens for CAN messages from the **BMS**.
2. The **Arduino Uno** reads SoC values (e.g., from ID `0x18FF28F4`).
3. The value is parsed and formatted.
4. The **MAX7219** 7-segment display shows the live percentage (e.g., `84%`).
5. A small **DC-DC converter** safely powers the circuit from the vehicle's 12V line.

---

## 💻 Code Overview

- Written in **C++ for Arduino**
- Uses `mcp2515.h` for CAN communication
- Uses `LedControl.h` for MAX7219 display

> See the `code/` folder for the full Arduino source code.

---

## ✅ Benefits

- Accurate SoC reading for **LiFePO4** and other lithium batteries  
- Replaces unreliable analog gauges  
- Real-time digital display for better **energy awareness**  
- Inexpensive and easy to install  
- Compatible with other CAN-equipped EVs

---

## 📷 Demo / Images

> _(Insert photos or videos of the display working on the vehicle if available)_

---

## 🔄 Future Improvements

- Add buzzer alert when SoC < 20%  
- Expand display to 4 digits or OLED screen  
- Read other BMS data (voltage, temp, current)  
- Add Bluetooth/IoT integration

---

## 📦 License

This project is open source under the [MIT License](LICENSE).

---

## 🤝 Contributions

Feel free to fork, improve, and submit pull requests! For questions, open an issue.

---

